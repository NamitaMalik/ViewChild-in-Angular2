{
  "name": "Viewchild in Angular2",
  "tagline": "This blog discusses parent and child component interaction using ViewChild.",
  "body": "# ViewChild in Angular2\r\n\r\nThere are situations when a **Parent Component** needs to interact with **Child Component** so we will discuss a solution for \r\nthose cases in this writeup.\r\n\r\nTo be more elaborate let us a take a small example. Suppose there is a small game which has multiple **components** as given below:\r\n\r\n1. `GameComponent` - This is the parent **component**.\r\n2. `GameBoardComponent` - The Game board **component** which has the actual game.\r\n3. `GameResetComponent` - **Component** which would be responsible for resetting the game.\r\n\r\nThere are multiple ways to achieve the interaction between the above **components**, and one of them is **ViewChild**.\r\n\r\nSo, a user starts playing the game and after he notices no valid moves are left, he plans to reset the game. He clicks on the `Reset` \r\nbutton which is the part of the `GameResetComponent(Child Component)`. The `GameResetComponent(Child Component)` then \r\ninteracts with `GameComponent (Parent Component)` and would request for reset. The `GameComponent(Parent Component)` would \r\nthen reset the game board by interacting with `GameBoardComponent(Child Component)` in order to reset the board.\r\n\r\nNotice two interactions here:\r\n\r\n1. Child **Component** to Parent **Component** : `GameResetComponent` -> `GameComponent`\r\n2. Parent **Component** to Child **Component** : `GameComponent` -> `GameBoardComponent`\r\n\r\nThe scheme of interactions discussed above is based on the **Mediator Design Pattern**. **Parent** **Component** is acting as a \r\n**central authority** which is responsible for communication between **child** **components**.\r\n\r\nWell, we would be discussing 2nd interaction in this blog i.e. **Parent** to **Child**. So suppose when a **parent** **component** needs \r\nto call a **child** **component** function, it can inject **child** **component** as a **ViewChild** in **parent component**.\r\n\r\nLet's take a very small example to demonstrate this:\r\n\r\nBelow is a child **component** that has a very simple functionality - It has some text which can be shown/hidden and there is a `Show/Hide Text` \r\nbutton that toggles the visibility of that text.\r\n\r\nText is hidden by default and once the user clicks on the button, `toggleVisibility` function is called, which also sends the source in the \r\nparameters as from where the function has been called.\r\n\r\n**child.component.ts**\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'child-component',\r\n    template: `\r\n    <div>\r\n        <h2>Child Component</h2>\r\n        <div class=\"text\">\r\n            <span [hidden]=\"!showText\">I am visible now! Thanks to {{visibilitySource}}</span>\r\n        </div>\r\n        <div>\r\n            <button (click)=\"toggleVisibility('Child Component')\">Show/Hide Text</button>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: ['.text { margin-bottom: 10px; color:red}']\r\n})\r\n\r\nexport class ChildComponent {\r\n    showText:Boolean = false;\r\n    visibilitySource:String = '';\r\n\r\n    toggleVisibility(source) {\r\n        this.showText = !this.showText;\r\n        this.visibilitySource = source;\r\n    }\r\n}\r\n```\r\n\r\nAnd here is the **parent** **component** for that **child** **component**:\r\n\r\n**app.component.ts**\r\n```TypeScript\r\nimport {Component} from '@angular/core';\r\nimport {ChildComponent} from './child.component';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n    <div>\r\n        <h1>Parent Component</h1>\r\n        <button (click)=\"showHideText()\">Show/Hide Child Component Text</button>\r\n        <child-component></child-component>\r\n    </div>\r\n    `,\r\n    directives: [ChildComponent]\r\n})\r\n\r\nexport class AppComponent {\r\n    showHideText() {\r\n        // TODO: Access child component to toggle text visibility\r\n    }\r\n}\r\n```\r\n\r\nNow assume, **parent** **component** also wants to show/hide the text displayed by the **child** **component**, so to achieve that we need to do \r\nthe following:\r\n\r\n1. Import **ViewChild** from `@angular/core`. So now first line of our `app.component.ts` would look like:\r\n    `import {Component,ViewChild} from '@angular/core';`\r\n    In the above line we have imported the **ViewChild**, an annotation provided by **Angular2** for getting reference of child **components**.\r\n\r\n2. Let's add the following snippet to our AppComponent class:\r\n    `@ViewChild(ChildComponent) private childComponent:ChildComponent;`\r\n    We are querying the `ChildComponent` using `@ViewChild` property decoration and injecting it to private `childComponent` property.\r\n\r\nThis `childComponent` property will now provide us access to the child **component**. We know that our child **component** i.e. `ChildComponent` \r\nhas a `toggleVisibility` function that shows/hides text and also displays the source which made it visible. In the code below we have \r\ndefined the `showHideText` method which then calls the `toggleVisibility` function through `childComponent` property.\r\n\r\n```TypeScript\r\nshowHideText(){\r\n    this.childComponent.toggleVisibility('Parent Component');\r\n}\r\n```\r\n\r\nIf we combine all the parts, our `app.component.ts` would now look as:\r\n\r\n```TypeScript\r\nimport {Component, ViewChild} from '@angular/core';\r\nimport {ChildComponent} from './child.component';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n    <div>\r\n        <h1>Parent Component</h1>\r\n        <button (click)=\"showHideText()\">Show/Hide Child Component Text</button>\r\n        <child-component></child-component>\r\n    </div>\r\n    `,\r\n    directives: [ChildComponent]\r\n})\r\n\r\nexport class AppComponent {\r\n    @ViewChild(ChildComponent) private childComponent:ChildComponent;\r\n\r\n    showHideText() {\r\n        this.childComponent.toggleVisibility('Parent Component');\r\n    }\r\n}\r\n```\r\n\r\nIn **Angular2** there are multiple ways of interaction between **components**, **ViewChild** is just one of them!",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}